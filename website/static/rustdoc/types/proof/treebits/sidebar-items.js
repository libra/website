initSidebarItems({"enum":[["NodeDirection",""]],"fn":[["child",""],["children_from_level","Returns the number of children a node `level` nodes high in a perfect binary tree has."],["children_from_level_nary","In a perfect (2^levels_to_collapse)-ary tree, how many children are there in level `level`"],["children_of_node",""],["direction_from_parent","This method takes in a node position and return NodeDirection based on if it's left or right child Similar to sibling. The observation is that, after strip out the right-most common bits, if next right-most bits is 0, it is left child. Otherwise, right child"],["disk_write_order","Defines an order for the nodes optimized for writing to disk. In this order all of the nodes with the same level(node)/levels_to_collapse and a common parent will share the same Disk Write Order. The Disk Write Order of a node will be greater than that of any of it's children. In this tree: `text 3 / \\ / \\ 1 5 / \\ / \\ 0 2 4 6` With `levels_to_collapse=2`, 0, 1, 2 have a DWO of 0; 4,5,6 a DWO of 1. 3 will have a DWO of 4 to account for the fact that the nodes with DWOs of 2 and 3 will have parents that have a DWO of 4."],["get_root","This method calculates the index of the smallest root which contains this leaf. Observe that, the root position is composed by a \"height\" number of ones"],["is_dummy","This method checks if a node is a dummy node. A node is a dummy if both two conditions below are true: 1, the node's in order traversal seq > max_leaf_node's, and 2, the node does not have left child or right child."],["is_freezable","This method checks if a node is freezable. A freezable is a node with a perfect subtree that does not include any dummy node."],["left_child","What is the left node of this node? Will overflow if the node is a leaf"],["left_most_child","Given a node, find its left most child in its subtree Left most child is a node, could be itself, at level 0"],["level","What level is this node in the tree, 0 if the node is a leaf, 1 if the level is one above a leaf, etc."],["node_from_level_and_pos","pos count start from 0 on each level"],["nodes_to_left_of","In a post-order tree traversal, how many nodes are traversed before `node` not including nodes that are children of `node`."],["parent","What is the parent of this node?"],["pos_counting_from_left","What position is the node within the level? i.e. how many nodes are to the left of this node at the same level"],["post_order_index","Given `node`, an index in an in-order traversal of a perfect binary tree, what order would the node be visited in in post-order traversal? For example, consider this tree of in-order nodes."],["right_child","What is the right node of this node? Will overflow if the node is a leaf"],["right_most_child","Given a node, find its right most child in its subtree. Right most child is a node, could be itself, at level 0"],["sibling","This method takes in a node position and return its sibling position"],["smear_ones_for_u64","Smearing all the bits starting from MSB with ones"]]});