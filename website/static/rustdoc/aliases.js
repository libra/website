var ALIASES = {};
ALIASES["accounts_generator"] = {};
ALIASES["accumulator"] = {};
ALIASES["admission_control"] = {};
ALIASES["blockchain_explorer"] = {};
ALIASES["build_helpers"] = {};
ALIASES["bytecode_verifier"] = {};
ALIASES["canonical_serialization"] = {};
ALIASES["client"] = {};
ALIASES["config"] = {};
ALIASES["consensus"] = {};
ALIASES["cost_synthesis"] = {};
ALIASES["crash_handler"] = {};
ALIASES["crypto"] = {};
ALIASES["crypto_derive"] = {};
ALIASES["debug_interface"] = {};
ALIASES["dump_ast"] = {};
ALIASES["e2e"] = {};
ALIASES["errors"] = {};
ALIASES["executable_helpers"] = {};
ALIASES["execution_client"] = {};
ALIASES["execution_proto"] = {};
ALIASES["execution_service"] = {};
ALIASES["executor"] = {};
ALIASES["failure_ext"] = {};
ALIASES["failure_macros"] = {};
ALIASES["grpc_helpers"] = {};
ALIASES["grpcio_client"] = {};
ALIASES["invalid_mutations"] = {};
ALIASES["ir_repl"] = {};
ALIASES["ir_to_bytecode"] = {};
ALIASES["jemalloc"] = {};
ALIASES["language_common"] = {};
ALIASES["legacy_consensus"] = {};
ALIASES["libra_config"] = {};
ALIASES["libra_store"] = {};
ALIASES["libradb"] = {};
ALIASES["logger"] = {};
ALIASES["main"] = {};
ALIASES["mempool"] = {};
ALIASES["memsocket"] = {};
ALIASES["metrics"] = {};
ALIASES["move_ir"] = {"/=":[{'crate':'move_ir','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'move_ir::common::errors::_core::ops'}],"*":[{'crate':'move_ir','ty':8,'name':'DerefMut','desc':'Used for mutable dereferencing operations, like in `*v =…','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'Mul','desc':'The multiplication operator `*`.','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'move_ir::common::errors::_core::ops'}],"..=":[{'crate':'move_ir','ty':3,'name':'RangeInclusive','desc':'A range bounded inclusively below and above (`start..=end`).','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':3,'name':'RangeToInclusive','desc':'A range only bounded inclusively above (`..=end`).','p':'move_ir::common::errors::_core::ops'}],">=":[{'crate':'move_ir','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'move_ir::common::errors::_core::prelude::v1'},{'crate':'move_ir','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'move_ir::common::errors::_core::prelude::v1'}],"^=":[{'crate':'move_ir','ty':8,'name':'BitXorAssign','desc':'The bitwise XOR assignment operator `^=`.','p':'move_ir::common::errors::_core::ops'}],">":[{'crate':'move_ir','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'move_ir::common::errors::_core::prelude::v1'},{'crate':'move_ir','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'move_ir::common::errors::_core::prelude::v1'}],"<=":[{'crate':'move_ir','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'move_ir::common::errors::_core::prelude::v1'},{'crate':'move_ir','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'move_ir::common::errors::_core::prelude::v1'}],"&=":[{'crate':'move_ir','ty':8,'name':'BitAndAssign','desc':'The bitwise AND assignment operator `&=`.','p':'move_ir::common::errors::_core::ops'}],"^":[{'crate':'move_ir','ty':8,'name':'BitXor','desc':'The bitwise XOR operator `^`.','p':'move_ir::common::errors::_core::ops'}],"[]":[{'crate':'move_ir','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'move_ir::common::errors::_core::ops'}],">>=":[{'crate':'move_ir','ty':8,'name':'ShrAssign','desc':'The right shift assignment operator `>>=`.','p':'move_ir::common::errors::_core::ops'}],"+":[{'crate':'move_ir','ty':8,'name':'Add','desc':'The addition operator `+`.','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'move_ir::common::errors::_core::ops'}],"%":[{'crate':'move_ir','ty':8,'name':'Rem','desc':'The remainder operator `%`.','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'move_ir::common::errors::_core::ops'}],"[":[{'crate':'move_ir','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'move_ir::common::errors::_core::ops'}],"/":[{'crate':'move_ir','ty':8,'name':'DivAssign','desc':'The division assignment operator `/=`.','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'Div','desc':'The division operator `/`.','p':'move_ir::common::errors::_core::ops'}],"..":[{'crate':'move_ir','ty':3,'name':'RangeFrom','desc':'A range only bounded inclusively below (`start..`).','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':3,'name':'Range','desc':'A (half-open) range bounded inclusively below and…','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':3,'name':'RangeTo','desc':'A range only bounded exclusively above (`..end`).','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':3,'name':'RangeFull','desc':'An unbounded range (`..`).','p':'move_ir::common::errors::_core::ops'}],"<<":[{'crate':'move_ir','ty':8,'name':'Shl','desc':'The left shift operator `<<`. Note that because this trait…','p':'move_ir::common::errors::_core::ops'}],"{}":[{'crate':'move_ir','ty':8,'name':'Display','desc':'Format trait for an empty format, `{}`.','p':'move_ir::common::errors::_core::fmt'}],"<":[{'crate':'move_ir','ty':8,'name':'PartialOrd','desc':'Trait for values that can be compared for a sort-order.','p':'move_ir::common::errors::_core::prelude::v1'},{'crate':'move_ir','ty':8,'name':'Ord','desc':'Trait for types that form a total order.','p':'move_ir::common::errors::_core::prelude::v1'}],"*=":[{'crate':'move_ir','ty':8,'name':'MulAssign','desc':'The multiplication assignment operator `*=`.','p':'move_ir::common::errors::_core::ops'}],"&":[{'crate':'move_ir','ty':8,'name':'BitAnd','desc':'The bitwise AND operator `&`.','p':'move_ir::common::errors::_core::ops'}],"|=":[{'crate':'move_ir','ty':8,'name':'BitOrAssign','desc':'The bitwise OR assignment operator `|=`.','p':'move_ir::common::errors::_core::ops'}],"|":[{'crate':'move_ir','ty':8,'name':'BitOr','desc':'The bitwise OR operator `|`.','p':'move_ir::common::errors::_core::ops'}],"&*":[{'crate':'move_ir','ty':8,'name':'Deref','desc':'Used for immutable dereferencing operations, like `*v`.','p':'move_ir::common::errors::_core::ops'}],">>":[{'crate':'move_ir','ty':8,'name':'Shr','desc':'The right shift operator `>>`. Note that because this…','p':'move_ir::common::errors::_core::ops'}],"?":[{'crate':'move_ir','ty':8,'name':'Try','desc':'A trait for customizing the behavior of the `?` operator.','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':14,'name':'try','desc':'Unwraps a result or propagates its error.','p':'move_ir::common::errors::_core'}],"-=":[{'crate':'move_ir','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'move_ir::common::errors::_core::ops'}],"==":[{'crate':'move_ir','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'move_ir::common::errors::_core::prelude::v1'},{'crate':'move_ir','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'move_ir::common::errors::_core::prelude::v1'}],"!=":[{'crate':'move_ir','ty':8,'name':'PartialEq','desc':'Trait for equality comparisons which are partial…','p':'move_ir::common::errors::_core::prelude::v1'},{'crate':'move_ir','ty':8,'name':'Eq','desc':'Trait for equality comparisons which are equivalence…','p':'move_ir::common::errors::_core::prelude::v1'}],"-":[{'crate':'move_ir','ty':8,'name':'Sub','desc':'The subtraction operator `-`.','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'SubAssign','desc':'The subtraction assignment operator `-=`.','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'Neg','desc':'The unary negation operator `-`.','p':'move_ir::common::errors::_core::ops'}],"+=":[{'crate':'move_ir','ty':8,'name':'AddAssign','desc':'The addition assignment operator `+=`.','p':'move_ir::common::errors::_core::ops'}],"%=":[{'crate':'move_ir','ty':8,'name':'RemAssign','desc':'The remainder assignment operator `%=`.','p':'move_ir::common::errors::_core::ops'}],"<<=":[{'crate':'move_ir','ty':8,'name':'ShlAssign','desc':'The left shift assignment operator `<<=`.','p':'move_ir::common::errors::_core::ops'}],"{:?}":[{'crate':'move_ir','ty':8,'name':'Debug','desc':'`?` formatting.','p':'move_ir::common::errors::_core::fmt'}],"]":[{'crate':'move_ir','ty':8,'name':'IndexMut','desc':'Used for indexing operations (`container[index]`) in…','p':'move_ir::common::errors::_core::ops'},{'crate':'move_ir','ty':8,'name':'Index','desc':'Used for indexing operations (`container[index]`) in…','p':'move_ir::common::errors::_core::ops'}],};
ALIASES["move_ir_natives"] = {};
ALIASES["move_ir_tests"] = {};
ALIASES["network"] = {};
ALIASES["patricia_merkle"] = {};
ALIASES["proptest_helpers"] = {};
ALIASES["proto_conv"] = {};
ALIASES["proto_conv_derive"] = {};
ALIASES["schemadb"] = {};
ALIASES["scratchpad"] = {};
ALIASES["secret_service"] = {};
ALIASES["sparse_merkle"] = {};
ALIASES["state_synchronizer"] = {};
ALIASES["statedb"] = {};
ALIASES["storage_client"] = {};
ALIASES["storage_proto"] = {};
ALIASES["storage_service"] = {};
ALIASES["testsuite"] = {};
ALIASES["transaction_generator"] = {};
ALIASES["types"] = {};
ALIASES["vm"] = {};
ALIASES["vm_cache_map"] = {};
ALIASES["vm_genesis"] = {};
ALIASES["vm_repl"] = {};
ALIASES["vm_runtime"] = {};
ALIASES["vm_runtime_tests"] = {};
ALIASES["vm_validator"] = {};
