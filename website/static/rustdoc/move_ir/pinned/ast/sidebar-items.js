initSidebarItems({"enum":[["BaseExp",""],["BaseVal","Lowest of the value hierarchy in the language realm. These values have a literal form and can be stored in structures"],["Builtin",""],["Cmd",""],["Exp","An expression whose evaluation produces a Val. (i.e: Either a BaseVal or a Reference)"],["FunctionBody",""],["FunctionCall",""],["RootVar","The variable where an object can be bound at the top level: An object can either be stored locally with a variable name and a stack frame, or it can be stored under an address account with its associated type."],["Statement",""],["Tag",""],["Type",""],["Val","Middle of the value hierarchy--either a BaseVal for a reference. These can be produced by evaluation, but do not necessarily have a literal form."],["Value","Top of the value hierarchy--all the other values plus Invalid"]],"fn":[["base_exp_substitute_locals",""],["exp_substitute_locals",""],["format_fields",""],["unique_locals",""],["write_kind_tag",""]],"struct":[["AccessPath",""],["Block",""],["Function",""],["FunctionSignature",""],["GlobalVar",""],["IfElse",""],["LocalVar",""],["Loop",""],["ModuleDefinition","A  Module consists of code specifying an agreed-upon abstraction over data of a certain type and functions over those types. All these types are opaque outside of the module"],["ModuleIdent",""],["Reference",""],["Script",""],["StructDefinition","A struct definition. Consists of code specifying an agreed-upon abstraction over data of a certain type"],["StructInstance","A smart struct object--class plus data"],["StructType","Identifier for a struct definition. Tells us where to look in the storage layer to find the code associated with the interface"],["UniqueMap","Unique wrapper around `BTreeMap` that throws on duplicate inserts"],["While",""]],"type":[["AccessPath_",""],["BaseExp_",""],["BaseVal_",""],["Cmd_",""],["ExpFields",""],["Exp_",""],["Field",""],["Fields",""],["FunctionCall_",""],["FunctionName",""],["Functions",""],["Loc",""],["StructName",""],["Structs",""],["ValFields",""],["Val_",""],["Value_",""],["Var",""],["Var_",""]]});