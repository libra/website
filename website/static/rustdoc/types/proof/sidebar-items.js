initSidebarItems({"constant":[["verify_event_accumulator_element",""],["verify_test_accumulator_element",""],["verify_transaction_accumulator_element",""]],"fn":[["verify_account_state","Verifies that the state of an account at version `state_version` is correct using the provided proof.  If `account_state_blob` is present, we expect the account to exist, otherwise we expect the account to not exist."],["verify_event","Verifies that a given event is correct using provided proof."],["verify_signed_transaction","Verifies that a `SignedTransaction` whose binary representation is `signed_transaction_bytes` is the version `transaction_version` transaction in the ledger using the provided proof."],["verify_sparse_merkle_element","If `element_blob` is present, verifies an element whose key is `element_key` and value is `element_blob` exists in the Sparse Merkle Tree using the provided proof. Otherwise verifies the proof is a valid non-inclusion proof that shows this key doesn't exist in the tree."]],"mod":[["definition","This module has definition of various proofs."],["position","This module provides an abstraction for positioning a node in a binary tree, A `Position` uniquely identifies the location of a node"],["proptest_proof","All proofs generated in this module are not valid proofs. They are only for the purpose of testing conversion between Rust and Protobuf."],["treebits","This module provides functions to manipulate a perfect binary tree. Nodes in the tree are represented by the order they would be visited in an in-order traversal. For example -- `text 3 / \\ / \\ 1 5 / \\ / \\ 0 2 4 6`"]],"struct":[["AccumulatorProofDeprecated","A proof is a collection of <positions,hashes> pair Positions is used to reconstruct the root"],["MerkleTreeInternalNode",""],["SparseMerkleLeafNode",""],["SparseMerkleProofDeprecated","The merkle proof of all the nodes from root on the path to the node to be proved Note: Storage is free to tweak the data structures, so caller shouldn't depend on anything other than the reference implementation provided on how to verify the proof."]],"type":[["EventAccumulatorInternalNode",""],["SparseMerkleInternalNode",""],["TestAccumulatorInternalNode",""],["TransactionAccumulatorInternalNode",""]]});