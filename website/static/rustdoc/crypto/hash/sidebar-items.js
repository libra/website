initSidebarItems({"struct":[["AccessPathHasher",""],["AccountAddressHasher",""],["AccountStateBlobHasher",""],["BLOCK_DIGESTER",""],["BlockDigester",""],["ContractEventHasher",""],["DEFAULT_DIGEST",""],["DigesterWriter","DigesterWriter is a writer that hashes incoming data continuously to generate digest."],["DiscoveryMsgHasher",""],["EVENT_DIGESTER",""],["EventAccumulatorHasher",""],["EventDigester",""],["GENESIS_BLOCK_ID","Genesis ID is used as a parent of the very first block executed by the executor."],["HashValue","Output value of our hash function. Intentionally opaque for safety and modularity."],["HashValueBitIterator","An iterator over `HashValue` that generates one bit for each iteration."],["LedgerInfoHasher",""],["PEER_ID_SET_DIGESTER",""],["PeerIdSetDigester",""],["RawTransactionHasher",""],["SIMPLE_STATE_DIGESTER",""],["SignedTransactionHasher",""],["SimpleStateDigester",""],["SparseMerkleInternalHasher",""],["SparseMerkleLeafHasher",""],["TestOnlyHasher",""],["TransactionAccumulatorHasher",""],["TransactionInfoHasher",""]],"trait":[["CryptoHash","A type that implements `CryptoHash` can be hashed by a cryptographic hash function and produce a `HashValue`. Each type needs to have its own `Hasher` type."],["CryptoHasher","A trait for generating hash from arbitrary stream of bytes."],["Digest","A Digestable type."],["TestOnlyHash",""]]});