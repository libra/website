(function() {var implementors = {};
implementors["storage_client"] = [{text:"impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(</a><a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;<a class=\"struct\" href=\"types/account_address/struct.AccountAddress.html\" title=\"struct types::account_address::AccountAddress\">AccountAddress</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/btree/map/struct.BTreeMap.html\" title=\"struct alloc::collections::btree::map::BTreeMap\">BTreeMap</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.u8.html\">u8</a>&gt;&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.RandomState.html\" title=\"struct std::collections::hash::map::RandomState\">RandomState</a>&gt;, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;<a class=\"struct\" href=\"crypto/hash/struct.HashValue.html\" title=\"struct crypto::hash::HashValue\">HashValue</a>, <a class=\"struct\" href=\"types/proof/definition/struct.SparseMerkleProof.html\" title=\"struct types::proof::definition::SparseMerkleProof\">SparseMerkleProof</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/collections/hash/map/struct.RandomState.html\" title=\"struct std::collections::hash::map::RandomState\">RandomState</a>&gt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">)</a>&gt; for <a class=\"struct\" href=\"storage_client/struct.VerifiedStateView.html\" title=\"struct storage_client::VerifiedStateView\">VerifiedStateView</a>&lt;'a&gt;",synthetic:false,types:["storage_client::state_view::VerifiedStateView"]},];
implementors["storage_proto"] = [{text:"impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(</a><a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;AccountStateBlob&gt;, SparseMerkleProof<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">)</a>&gt; for <a class=\"struct\" href=\"storage_proto/struct.GetAccountStateWithProofByStateRootResponse.html\" title=\"struct storage_proto::GetAccountStateWithProofByStateRootResponse\">GetAccountStateWithProofByStateRootResponse</a>",synthetic:false,types:["storage_proto::GetAccountStateWithProofByStateRootResponse"]},];
implementors["types"] = [{text:"impl&lt;'a&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"types/access_path/struct.AccessPath.html\" title=\"struct types::access_path::AccessPath\">AccessPath</a>&gt; for &amp;'a <a class=\"struct\" href=\"types/language_storage/struct.CodeKey.html\" title=\"struct types::language_storage::CodeKey\">CodeKey</a>",synthetic:false,types:["types::language_storage::CodeKey"]},];
implementors["vm_runtime"] = [{text:"impl&lt;'txn, F, '_&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"vm/errors/struct.Location.html\" title=\"struct vm::errors::Location\">Location</a>&gt; for &amp;'_ <a class=\"struct\" href=\"vm_runtime/frame/struct.Frame.html\" title=\"struct vm_runtime::frame::Frame\">Frame</a>&lt;'txn, F&gt;",synthetic:false,types:["vm_runtime::frame::Frame"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
