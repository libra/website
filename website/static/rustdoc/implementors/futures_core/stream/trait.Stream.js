(function() {var implementors = {};
implementors["memsocket"] = [{text:"impl&lt;'a&gt; <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"memsocket/struct.Incoming.html\" title=\"struct memsocket::Incoming\">Incoming</a>&lt;'a&gt;",synthetic:false,types:["memsocket::Incoming"]},];
implementors["network"] = [{text:"impl <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"network/interface/struct.ConsensusNetworkEvents.html\" title=\"struct network::interface::ConsensusNetworkEvents\">ConsensusNetworkEvents</a>",synthetic:false,types:["network::interface::consensus::ConsensusNetworkEvents"]},{text:"impl <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"network/interface/struct.MempoolNetworkEvents.html\" title=\"struct network::interface::MempoolNetworkEvents\">MempoolNetworkEvents</a>",synthetic:false,types:["network::interface::mempool::MempoolNetworkEvents"]},{text:"impl <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"network/interface/struct.StateSynchronizerNetworkEvents.html\" title=\"struct network::interface::StateSynchronizerNetworkEvents\">StateSynchronizerNetworkEvents</a>",synthetic:false,types:["network::interface::state_synchronizer::StateSynchronizerNetworkEvents"]},{text:"impl&lt;TSocket&gt; <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"network/multiplexing/yamux/struct.Listener.html\" title=\"struct network::multiplexing::yamux::Listener\">Listener</a>&lt;TSocket&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;TSocket: <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_io/futures_io/if_std/trait.AsyncRead.html\" title=\"trait futures_io::if_std::AsyncRead\">AsyncRead</a> + <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_io/futures_io/if_std/trait.AsyncWrite.html\" title=\"trait futures_io::if_std::AsyncWrite\">AsyncWrite</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Unpin.html\" title=\"trait core::marker::Unpin\">Unpin</a>,&nbsp;</span>",synthetic:false,types:["network::multiplexing::yamux::Listener"]},{text:"impl&lt;St, Fut1, O1, Fut2, O2, E, F&gt; <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"network/transport/and_then/struct.AndThenStream.html\" title=\"struct network::transport::and_then::AndThenStream\">AndThenStream</a>&lt;St, F&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(</a>Fut1, Multiaddr<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">)</a>, E&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut1: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;O1, E&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut2: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;O2, E&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;F: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(O1, <a class=\"enum\" href=\"network/transport/enum.ConnectionOrigin.html\" title=\"enum network::transport::ConnectionOrigin\">ConnectionOrigin</a>) -&gt; Fut2 + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>,&nbsp;</span>",synthetic:false,types:["network::transport::and_then::AndThenStream"]},{text:"impl <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"network/transport/memory/struct.Listener.html\" title=\"struct network::transport::memory::Listener\">Listener</a>",synthetic:false,types:["network::transport::memory::Listener"]},{text:"impl <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"network/transport/tcp/struct.TcpListenerStream.html\" title=\"struct network::transport::tcp::TcpListenerStream\">TcpListenerStream</a>",synthetic:false,types:["network::transport::tcp::TcpListenerStream"]},{text:"impl&lt;St, Fut, O, E&gt; <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a> for <a class=\"struct\" href=\"network/transport/timeout/struct.TimeoutStream.html\" title=\"struct network::transport::timeout::TimeoutStream\">TimeoutStream</a>&lt;St&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;St: <a class=\"trait\" href=\"https://rust-lang-nursery.github.io/futures-api-docs/0.3.0-alpha.14/futures_core/futures_core/stream/trait.Stream.html\" title=\"trait futures_core::stream::Stream\">Stream</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">(</a>Fut, Multiaddr<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.tuple.html\">)</a>, E&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;Fut: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;O, E&gt;&gt;,<br>&nbsp;&nbsp;&nbsp;&nbsp;E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/std/error/trait.Error.html\" title=\"trait std::error::Error\">Error</a>,&nbsp;</span>",synthetic:false,types:["network::transport::timeout::TimeoutStream"]},];

            if (window.register_implementors) {
                window.register_implementors(implementors);
            } else {
                window.pending_implementors = implementors;
            }
        
})()
